/**
 * ObjectID
 * 
 * _id: 5a724953ab83547957541e6a
 * 
 * 2 characters per byte
 * 
 * 12 bytes
 *  4 bytes (8 characters): timestamp
 *  3 bytes: machine identifier
 *  2 bytes: process identifier
 *  3 bytes: counter
 * 
 */

 /** 
  * It is slightly possible to generate two of the same _id's
  * 
  * 1 byte = 8 bits
  * 2 ^ 8 = 256 possible combinations
  * 2 ^ 24 (bytes in an objectID) = 16 Million combinations
  * 
  * So, if at the same moment (timestamp),
  * on the same machine,
  * in the same process,
  * we generate more than 16 million documents,
  * the counter will overflow (we will have multiple documents with the same id)
  * 
  */

  /**
   * SQL generates absolutely unique ids for each row, but this hurts scalability
   * objectID is generated by the MongoDB Driver, not Mongo itself
   * 
   * More scalable because we don't have to wait for MongoDB to generate a new id
   * The Driver can generate an almost unique identifier using these 12 bytes
   */

  const mongooose = require('mongoose');
  const id = new mongooose.Types.ObjectId();
  console.log('objectID: ', id);
  console.log('timestamp: ', id.getTimestamp());

  const isValid = mongooose.Types.ObjectId.isValid('1234');
  console.log('isValid: ', isValid);
